=pod

=head1 NAME

SSL_ech_set1_echconfig, SSL_ech_set1_svcb,
SSL_ech_set_server_names, SSL_ech_set_outer_server_name,
SSL_ech_set_outer_alpn_protos,
OSSL_ECH_INFO_free, OSSL_ECH_INFO_print,
SSL_ech_get_info, SSL_ech_reduce, SSL_ech_get_status,
SSL_ech_set_grease_suite, SSL_ech_set_grease_type,
SSL_ech_set_callback, SSL_ech_get_retry_config,
SSL_CTX_ech_set1_echconfig, SSL_CTX_ech_server_get_key_status,
SSL_CTX_ech_server_flush_keys, SSL_CTX_ech_server_enable_file,
SSL_CTX_ech_server_enable_buffer, SSL_CTX_ech_server_enable_dir,
SSL_CTX_ech_raw_decrypt, SSL_CTX_ech_set_callback,
ossl_ech_make_echconfig
- Encrypted ClientHello (ECH) functions

=head1 SYNOPSIS

 #include <openssl/ech.h>

 int SSL_ech_set1_echconfig(SSL *s, int *num_echs,
                            int ekfmt, char *ekval, size_t eklen);
 int SSL_ech_set1_svcb(SSL *s, int *num_echs,
                       int rrfmt, char *rrval, size_t rrlen);
 int SSL_ech_set_server_names(SSL *s, const char *inner_name,
                              const char *outer_name, int no_outer);
 int SSL_ech_set_outer_server_name(SSL *s, const char *outer_name, int no_outer);
 int SSL_ech_set_outer_alpn_protos(SSL *s, const unsigned char *protos,
                                  unsigned int protos_len);
 void OSSL_ECH_INFO_free(OSSL_ECH_INFO *info, int count);
 int OSSL_ECH_INFO_print(BIO *out, OSSL_ECH_INFO *info, int count);
 int SSL_ech_get_info(SSL *s, OSSL_ECH_INFO **info, int *count);
 int SSL_ech_reduce(SSL *s, int index);
 int SSL_ech_get_status(SSL *s, char **inner_sni, char **outer_sni);
 int SSL_ech_set_grease_suite(SSL *s, const char *suite);
 int SSL_ech_set_grease_type(SSL *s, uint16_t type);
 void SSL_ech_set_callback(SSL *s, SSL_ech_cb_func f);
 int SSL_ech_get_retry_config(SSL *s, const unsigned char **ec, size_t *eclen);
 int SSL_CTX_ech_set1_echconfig(SSL_CTX *ctx, int *num_echs,
                                int ekfmt, size_t eklen, char *ekval);
 int SSL_CTX_ech_server_get_key_status(SSL_CTX *ctx, int *numkeys);
 int SSL_CTX_ech_server_flush_keys(SSL_CTX *ctx, time_t age);
 int SSL_CTX_ech_server_enable_file(SSL_CTX *ctx, const char *echcfgfile);
 int SSL_CTX_ech_server_enable_buffer(SSL_CTX *ctx, const unsigned char *buf,
                                      const size_t blen);
 int SSL_CTX_ech_server_enable_dir(SSL_CTX *ctx, int *loaded,
                                   const char *echdir);
 int SSL_CTX_ech_raw_decrypt(SSL_CTX *ctx,
                             int *decrypted_ok,
                             char **inner_sni, char **outer_sni,
                             unsigned char *outer_ch, size_t outer_len,
                             unsigned char *inner_ch, size_t *inner_len);
 void SSL_CTX_ech_set_callback(SSL_CTX *ctx, SSL_ech_cb_func f);
 int ossl_ech_make_echconfig(unsigned char *echconfig, size_t *echconfiglen,
                             unsigned char *priv, size_t *privlen,
                             uint16_t ekversion, uint16_t max_name_length,
                             const char *public_name, OSSL_HPKE_SUITE suite,
                             const unsigned char *extvals, size_t extlen);

=head1 DESCRIPTION

=head2 Data Structures

 typedef struct ossl_ech_info_st {
     int index; /* externally re-usable reference to this value */
     char *public_name; /* public_name from API or ECHConfig */
     char *inner_name; /* server-name (for inner CH if doing ECH) */
     char *outer_alpns; /* outer ALPN string */
     char *inner_alpns; /* inner ALPN string */
     char *echconfig; /* a JSON-like version of the associated ECHConfig */
 } OSSL_ECH_INFO;

 typedef unsigned int (*SSL_ech_cb_func)(SSL *s, char *str);

=head2 Constants

Some externally visible limits:

=over 4

=item B<OSSL_ECH_MAX_PAYLOAD_LEN> 1500, max ECH ciphertext to en/decode 

=item B<OSSL_ECH_MIN_ECHCONFIG_LEN> 32, min for all encodings

=item B<OSSL_ECH_MAX_ECHCONFIG_LEN> 1500, max for all encodings

=item B<OSSL_ECH_MAX_ECHCONFIGEXT_LEN> 100, ECHConfig extension max

=item B<OSSL_ECH_MAX_MAXNAMELEN> 255, ECHConfig max for max name length

=item B<OSSL_ECH_MAX_PUBLICNAME> 255, max ECHConfig public name length

=back

Supported formats for encodings of ECHConfig values read from DNS
or from files:

=over 4

=item B<OSSL_ECH_FMT_GUESS>     0, implementation will guess

=item B<OSSL_ECH_FMT_BIN>       1, catenated binary ECHConfigs

=item B<OSSL_ECH_FMT_B64TXT>    2, base64 ECHConfigs (';' separated)

=item B<OSSL_ECH_FMT_ASCIIHEX>  3, ascii-hex ECHConfigs (';' separated

=item B<OSSL_ECH_FMT_HTTPSSVC>  4, presentation form with "ech=<b64>"

=item B<OSSL_ECH_FMT_SEPARATOR>  ";" separator str for catenation

=back


ECH version - we only support draft-13 as of now.  As/if new versions
are added, those will be noted here.
This isn't directly used in APIs (but is present/checked-for in some
encoded values), so is only made visible here as it has changed with
each substantive revision of the draft specification (and will likely
change at the last moment when an RFC is issued).

=over 4

=item B<OSSL_ECH_DRAFT_13_VERSION> 0xfe0d, version from draft-13

=back

Return codes from SSL_ech_get_status

=over 4
 
=item B<SSL_ECH_STATUS_BACKEND>    4, ECH backend: saw an ech_is_inner

=item B<SSL_ECH_STATUS_GREASE_ECH> 3, GREASEd and got an ECH in return

=item B<SSL_ECH_STATUS_GREASE>     2, ECH GREASE happened

=item B<SSL_ECH_STATUS_SUCCESS>    1, Success

=item B<SSL_ECH_STATUS_FAILED>     0, Some internal or protocol error

=item B<SSL_ECH_STATUS_BAD_CALL>   -100, Some in/out arguments were NULL

=item B<SSL_ECH_STATUS_NOT_TRIED>  -101, ECH wasn't attempted

=item B<SSL_ECH_STATUS_BAD_NAME>   -102, ECH ok but server cert bad

=item B<SSL_ECH_STATUS_NOT_CONFIGURED> -103, ECH wasn't configured

=item B<SSL_ECH_STATUS_FAILED_ECH> -105, We tried, failed and got an ECH

=back

=head2 Client Functions

The SSL_ech_* functions are generally for clients.

=head2 Server Functions

The SSL_CTX_ech_* functions are generally for servers.

=head1 RETURN VALUES

Mostly 1 for success.

=head1 SEE ALSO

The Encrypted ClientHello specification: https://datatracker.ietf.org/doc/draft-ietf-tls-esni/

=head1 HISTORY

This functionality described here was added in OpenSSL 3.2.

=head1 COPYRIGHT

Copyright 2022 The OpenSSL Project Authors. All Rights Reserved.

Licensed under the Apache License 2.0 (the "License").  You may not use
this file except in compliance with the License.  You can obtain a copy
in the file LICENSE in the source distribution or at
L<https://www.openssl.org/source/license.html>.

=cut
