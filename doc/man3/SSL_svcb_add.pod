=pod

=head1 NAME

SSL_CTX_svcb_add, SSL_svcb_add, SSL_ech_add, SSL_CTX_ech_add,
SSL_ech_server_name, SSL_ech_query,
SSL_ech_set_outer_server_name, SSL_CTX_ech_set_outer_server_name,
SSL_CTX_ech_set_outer_alpn_protos, SSL_ech_set_outer_alpn_protos,
SSL_ECH_DETS_print, SSL_ech_reduce, SSL_CTX_ech_server_key_status,
SSL_CTX_ech_server_flush_keys, SSL_CTX_ech_server_enable,
SSL_CTX_ech_readpemdir, SSL_ech_print,
SSL_ech_get_status, SSL_ech_set_grease_suite, SSL_ech_set_grease_type,
SSL_CTX_ech_set_callback, SSL_ech_set_callback,
SSL_ECH_DETS_free,SSL_CTX_ech_raw_decrypt,
SSL_CTX_ech_server_enable_buffer,SSL_ech_get_returned
- Encrypted Client Helllo (ECH) support - client, server and commmon functions

=head1 SYNOPSIS

 #include <openssl/ech.h>
 int SSL_CTX_svcb_add(SSL_CTX *ctx, short rrfmt, size_t rrlen, char *rrval, int *num_echs);
 int SSL_svcb_add(SSL *con, int rrfmt, size_t rrlen, char *rrval, int *num_echs);
 int SSL_ech_add(SSL *con, int ekfmt, size_t eklen, char *echkeys, int *num_echs);
 int SSL_CTX_ech_add(SSL_CTX *ctx, short ekfmt, size_t eklen, char *echkeys, int *num_echs);
 int SSL_ech_server_name(SSL *s, const char *inner_name, const char *outer_name);
 int SSL_ech_query(SSL *in, ECH_DETS **out, int *nindices);
 int SSL_ECH_DETS_print(BIO* out, ECH_DETS *se, int count);
 int SSL_ech_reduce(SSL *in, int index);
 int SSL_CTX_ech_server_key_status(SSL_CTX *s, int *numkeys);
 int SSL_CTX_ech_server_flush_keys(SSL_CTX *s, int age);
 int SSL_CTX_ech_server_enable(SSL_CTX *s, const char *echcfgfile);
 int SSL_CTX_ech_readpemdir(SSL_CTX *ctx, const char *echdir, int *number_loaded);
 int SSL_ech_print(BIO* out, SSL *con, int selector);
 int SSL_ech_get_status(SSL *s, char **inner_sni, char **outer_sni);
 int SSL_ech_set_grease_suite(SSL *s, const char* suite);
 int SSL_ech_set_grease_type(SSL *s, uint16_t type);
 int SSL_CTX_ech_set_outer_server_name(SSL *s, const char *outer_name);
 int SSL_ech_set_outer_server_name(SSL *s, const char *outer_name);
 int SSL_CTX_ech_set_outer_alpn_protos(SSL_CTX *ctx, const unsigned char *protos, const size_t protos_len);
 int SSL_ech_set_outer_alpn_protos(SSL_CTX *ctx, const unsigned char *protos, const size_t protos_len);
 void SSL_CTX_ech_set_callback(SSL *s, SSL_ech_cb_func f);
 void SSL_ech_set_callback(SSL *s, SSL_ech_cb_func f);
 void SSL_ECH_DETS_free(ECH_DETS *in, int size);
 int SSL_CTX_ech_raw_decrypt(SSL_CTX *ctx, unsigned char *outer_ch, size_t outer_len, unsigned char *inner_ch, size_t *inner_len, char **inner_sni, char **outer_sni, int *decrypted_ok);
 int SSL_CTX_ech_server_enable_buffer( SSL_CTX *s, const unsigned char *buf, const size_t blen);
 int SSL_ech_get_returned(SSL *s, size_t *eclen, const unsigned char **ec);

=head1 DESCRIPTION

These functions handle the client side of Encrypted ClientHello (ECH). Some are also useful
on servers.

The rest is TBD for now, sorry;-)


=head1 RETURN VALUES

Unless otherwise stated all functions return 1 for success.

=head1 SEE ALSO

The draft specification: https://tools.ietf.org/html/draft-ietf-tls-esni

My ECH enabled fork has it's README at: https://github.com/sftcd/openssl/tree/master/esnistuff
(that README is just a re-direct to the relevant branch).

=head1 HISTORY

Initially developed by Stephen Farrell. Subsequently supported by OTF via
the DEfO project: https://defo.ie/

=head1 COPYRIGHT

Copyright 2019-2021 The OpenSSL Project Authors. All Rights Reserved.

Licensed under the Apache License 2.0 (the "License").  You may not use
this file except in compliance with the License.  You can obtain a copy
in the file LICENSE in the source distribution or at
L<https://www.openssl.org/source/license.html>.

=cut
