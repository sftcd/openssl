
##
## Makefile for OpenSSL/ESNI/Android NDK
##
## Generated by Configure from Configurations/common0.tmpl, Configurations/unix-Makefile.tmpl, Configurations/common.tmpl

PLATFORM=android-arm
OPTIONS=-D__ANDROID_API__=16 no-asan no-crypto-mdebug no-crypto-mdebug-backtrace no-devcryptoeng no-ec_nistp_64_gcc_128 no-egd no-external-tests no-fuzz-afl no-fuzz-libfuzzer no-heartbeats no-ktls no-md2 no-msan no-rc5 no-sctp no-ssl-trace no-ssl3 no-ssl3-method no-ubsan no-unit-test no-weak-ssl-ciphers no-zlib no-zlib-dynamic
CONFIGURE_ARGS=("android-arm", "-D__ANDROID_API__=16")
SRCDIR=.
BLDDIR=.

VERSION=3.0.0-dev
MAJOR=3
MINOR=0
SHLIB_VERSION_NUMBER=3
SHLIB_TARGET=linux-shared
SHLIB_EXT=.so.$(SHLIB_VERSION_NUMBER)
SHLIB_EXT_SIMPLE=.so
SHLIB_EXT_IMPORT=

LIBS=apps/libapps.a libcrypto.a libssl.a test/libtestutil.a
SHLIBS=libcrypto$(SHLIB_EXT) libssl$(SHLIB_EXT)
SHLIB_INFO=";" "libcrypto$(SHLIB_EXT);libcrypto$(SHLIB_EXT_SIMPLE)" "libssl$(SHLIB_EXT);libssl$(SHLIB_EXT_SIMPLE)" ";"
ENGINES=engines/capi.so engines/dasync.so engines/ossltest.so engines/padlock.so
SCRIPTS=apps/CA.pl apps/tsget.pl tools/c_rehash util/shlib_wrap.sh



# For "optional" echo messages, to get "real" silence
ECHO = echo

##### User defined commands and flags ################################

# We let the C compiler driver to take care of .s files. This is done in
# order to be excused from maintaining a separate set of architecture
# dependent assembler flags. E.g. if you throw -mcpu=ultrasparc at SPARC
# gcc, then the driver will automatically translate it to -xarch=v8plus
# and pass it down to assembler.  In any case, we do not define AS or
# ASFLAGS for this reason.

CROSS_COMPILE=arm-linux-androideabi-
CC=$(CROSS_COMPILE)gcc
CXX=$(CROSS_COMPILE)g++
CPPFLAGS=-D__ANDROID_API__=16
CFLAGS=-Wall -O3
CXXFLAGS=-Wall -O3
LDFLAGS= 
EX_LIBS= 

MAKEDEPEND=$(CROSS_COMPILE)gcc

PERL=/usr/bin/perl

AR=$(CROSS_COMPILE)ar
ARFLAGS= r
RANLIB=$(CROSS_COMPILE)ranlib
RC= $(CROSS_COMPILE)windres
RCFLAGS= 

RM= rm -f
RMDIR= rmdir
TAR= tar
TARFLAGS= 

BASENAME=       openssl
NAME=           $(BASENAME)-$(VERSION)
# Relative to $(SRCDIR)
TARFILE=        ../$(NAME).tar

##### Project flags ##################################################

# Variables starting with CNF_ are common variables for all product types

CNF_CPPFLAGS=-D__ANDROID_API__=16 -isystem $(ANDROID_NDK)/sysroot/usr/include/arm-linux-androideabi -isystem $(ANDROID_NDK)/sysroot/usr/include -DNDEBUG
CNF_CFLAGS=-pthread  -mandroid --sysroot=$(ANDROID_NDK)/platforms/android-16/arch-arm -Wa,--noexecstack
CNF_CXXFLAGS=-std=c++11 -pthread  -mandroid --sysroot=$(ANDROID_NDK)/platforms/android-16/arch-arm
CNF_LDFLAGS=
CNF_EX_LIBS=-ldl -pthread

# Variables starting with LIB_ are used to build library object files
# and shared libraries.
# Variables starting with DSO_ are used to build DSOs and their object files.
# Variables starting with BIN_ are used to build programs and their object
# files.

LIB_CPPFLAGS=-DOPENSSL_USE_NODELETE -DOPENSSL_PIC -DOPENSSL_CPUID_OBJ -DOPENSSL_BN_ASM_MONT -DOPENSSL_BN_ASM_GF2m -DSHA1_ASM -DSHA256_ASM -DSHA512_ASM -DKECCAK1600_ASM -DAES_ASM -DBSAES_ASM -DGHASH_ASM -DECP_NISTZ256_ASM -DPOLY1305_ASM -DOPENSSLDIR="\"$(OPENSSLDIR)\"" -DENGINESDIR="\"$(ENGINESDIR)\"" $(CNF_CPPFLAGS) $(CPPFLAGS)
LIB_CFLAGS=-fPIC $(CNF_CFLAGS) $(CFLAGS)
LIB_CXXFLAGS=$(CNF_CXXFLAGS) $(CXXFLAGS)
LIB_LDFLAGS=-Wl,-znodelete -shared -Wl,-Bsymbolic $(CNF_LDFLAGS) $(LDFLAGS)
LIB_EX_LIBS=$(CNF_EX_LIBS) $(EX_LIBS)
DSO_CPPFLAGS=$(CNF_CPPFLAGS) $(CPPFLAGS)
DSO_CFLAGS=-fPIC $(CNF_CFLAGS) $(CFLAGS)
DSO_CXXFLAGS=$(CNF_CXXFLAGS) $(CXXFLAGS)
DSO_LDFLAGS=-Wl,-znodelete -shared -Wl,-Bsymbolic $(CNF_LDFLAGS) $(LDFLAGS)
DSO_EX_LIBS=$(CNF_EX_LIBS) $(EX_LIBS)
BIN_CPPFLAGS=$(CNF_CPPFLAGS) $(CPPFLAGS)
BIN_CFLAGS=-pie $(CNF_CFLAGS) $(CFLAGS)
BIN_CXXFLAGS=$(CNF_CXXFLAGS) $(CXXFLAGS)
BIN_LDFLAGS=$(CNF_LDFLAGS) $(LDFLAGS)
BIN_EX_LIBS=$(CNF_EX_LIBS) $(EX_LIBS)

# CPPFLAGS_Q is used for one thing only: to build up buildinf.h
CPPFLAGS_Q=-DOPENSSL_USE_NODELETE -DOPENSSL_PIC -DOPENSSL_CPUID_OBJ -DOPENSSL_BN_ASM_MONT -DOPENSSL_BN_ASM_GF2m -DSHA1_ASM -DSHA256_ASM -DSHA512_ASM -DKECCAK1600_ASM -DAES_ASM -DBSAES_ASM -DGHASH_ASM -DECP_NISTZ256_ASM -DPOLY1305_ASM -D__ANDROID_API__=16 -isystem $(ANDROID_NDK)/sysroot/usr/include/arm-linux-androideabi -isystem $(ANDROID_NDK)/sysroot/usr/include -DNDEBUG -D__ANDROID_API__=16

PERLASM_SCHEME= void

# For x86 assembler: Set PROCESSOR to 386 if you want to support
# the 80386.
PROCESSOR= 

# We want error [and other] messages in English. Trouble is that make(1)
# doesn't pass macros down as environment variables unless there already
# was corresponding variable originally set. In other words we can only
# reassign environment variables, but not set new ones, not in portable
# manner that is. That's why we reassign several, just to be sure...
LC_ALL=C
LC_MESSAGES=C
LANG=C

# The main targets ###################################################
#

all: esni mk_esnikeys

# While futzing with documentation/doxygen stuff this is handy
thelot:
	- (cd ..;make)
	- make esni
	- make test
	- make doc	
	- ./testclient.sh -H ietf.org

libssl.a: ../libssl.a
	cp ../libssl.a .

libcrypto.a: ../libcrypto.a
	cp ../libcrypto.a .

doc: 
	- doxygen esni.doxy
	- moxygen -a doxy/xml
	- cat api.md | sed -e 's/\(.*{#\)\(.*\)}/<p id="\2"><hr><\/p>\n\n\1/' | sed -e 's/{#//' >api2.md
	- mv api2.md api.md
	- multimarkdown api.md >api.html

docclean:
	- rm -rf doxy

# for some reason a symbol we need is not public in libssl.so but is in libssl.a
# so we'll just copy stuff down here for the moment - should be ok in the end as
# our final code won't be doing the direct call (I hope)
#

# change back to the line below when done debugging maybe
#${CC} -g -pthread -Wa,--noexecstack -Wall -O3 -o $@ $< -L. -lssl -lcrypto -ldl 

esnimain.o: esnimain.c ../include/openssl/esni.h ../include/openssl/esnierr.h
	$(CC) -g -I../apps -I. -I..  -I../include -I../ssl $(BIN_CFLAGS) $(BIN_CPPFLAGS) -MMD -MF $<.d.tmp -MT $@ -c -o $@ $< 

esni: esnimain.o libssl.a libcrypto.a
	$(CC) -g -pie -pthread  -mandroid --sysroot=$(ANDROID_NDK)/platforms/android-16/arch-arm -Wa,--noexecstack -Wall -L. -o esni esnimain.o ../apps/libapps.a -lssl -lcrypto -ldl -pthread 

test:
	./doit.sh fresh

mk_esnikeys: mk_esnikeys.o

mk_esnikeys.o: mk_esnikeys.c ../include/openssl/esni.h 
	$(CC) -g -I../apps -I. -I..  -I../include -I../ssl $(BIN_CFLAGS) $(BIN_CPPFLAGS) -MMD -MF $<.d.tmp -MT $@ -c -o $@ $< 

mk_esnikeys: mk_esnikeys.o libssl.a libcrypto.a
	$(CC) -g -pie -pthread  -mandroid --sysroot=$(ANDROID_NDK)/platforms/android-16/arch-arm -Wa,--noexecstack -Wall -L. -o $@ mk_esnikeys.o -lssl -lcrypto -ldl -pthread 

clean:
	- rm -f esni esnimain.o libssl.a libcrypto.a *.tmp 
	- rm -f mk_esnikeys.o mk_esnikeys 


