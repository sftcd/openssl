worker_processes  1;
error_log  fe/logs/error.log  info;

# this makes valgrind/gdb easier
# daemon off;
# # if debugging is needed - we get a core in /tmp/cores
# and then: sudo gdb ~/code/nginx/objs/nginx /tmp/cores/core
# for a backtrace
# error_log  logs/error.log  debug;
# working_directory  /tmp/cores/;
# worker_rlimit_core 500M;

# front end on 9443, backend on 9444

events {
    worker_connections  1024;
}


http {
    access_log          fe/logs/access.log combined;
    ssl_echkeydir       echkeydir;
    server {
        listen              9442 default_server ssl;
        ssl_certificate     cadir/example.com.crt;
        ssl_certificate_key cadir/example.com.priv;
        ssl_protocols       TLSv1.3;
        server_name         example.com bar.example.com;
        location / {
            root   fe/www;
            index  index.html index.htm;
        }
    }
}

stream {
    map $ssl_preread_server_name $targetBackend {
        foo.example.com  127.0.0.1:9444;
        example.com  127.0.0.1:9442;
    }

    log_format basic '$remote_addr [$time_local] '
                 '$protocol $status $bytes_sent $bytes_received '
                 '$session_time "$upstream_addr" '
                 '"$upstream_bytes_sent" "$upstream_bytes_received" "$upstream_connect_time"';

    access_log fe/logs/access.log basic;
    error_log  fe/logs/error.log;
    server {
        listen              9443;
        proxy_connect_timeout 1s;
        proxy_timeout 3s;
        proxy_pass $targetBackend;
        ssl_preread on;
    }
}

